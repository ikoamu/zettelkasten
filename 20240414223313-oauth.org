:PROPERTIES:
:ID:       05D9B89E-39B7-4362-B895-2C5566A746BA
:END:
#+title: OAuth

https://zenn.dev/levtech/articles/a6e8910df5baa0

* 認証と認可
:PROPERTIES:
:ID:       8D5398ED-8966-436A-B8E8-5909FD45284D
:END:

** 認証
- ユーザーが誰であるかを確認するプロセス
  *Authentication*

** 認可
- ユーザーが特定の権限を持っているかを確認するプロセス
  *Authorization*

** 例えば
- ATMでキャッシュカードと暗証番号を入力してお金を引き出す
  -> ATMを利用するのは「誰であるか」を確認するプロセス(認証)

- 電車に乗車する際に改札に切符を通す
  -> 切符を使って電車に乗車する「権限を持っているか」を確認するプロセス(認可)

* 認証に基づく認可
アプリケーションを開発する際には認証後に認可するというセットで行われるケースが多い

** 例えば
1. ログイン機能で認証することでユーザーを特定
2. そのユーザーに紐づくロールを取得
3. そのロールを元に権限があるかを確認する

* 認証の３要素
- 知識情報(What you know)
  メールアドレス、パスワードなどの本人のみが知っている情報
- 所有情報(What you have)
  運転免許証やパスポートなどの本人のみが持っている情報
- 生体情報(What you are)
  指紋や顔などの本人の生体に備わっている固有の情報

上記のうち、１要素を用いて認証することを他要素認証、２要素以上を用いて認証することを他要素認証という

* いろいろな認証方法

** Basic認証
:PROPERTIES:
:ID:       78D2FD39-C567-4EFD-B99A-84E21FC4A5A7
:END:
1. ユーザーが保護されたリソースにアクセス
2. サーバーがブラウザに401を返す
   #+begin_example
   HTTP 401 Unauthorized
   WWW-Authenticate: Basic realm="Aceess to the site"
   #+end_example
3. ユーザーがユーザー名とパスワードを入力
4. サーバーが認証情報を検証
5. サーバーが認証結果をブラウザに返す
   - 認証成功: 200
   - 認証失敗: 401

通常、ブラウザは一度Basic認証に成功したユーザー情報をキャッシュし、同
様のリソースへのアクセス時に自動的にAuthrorizationヘッダーに含めてサー
バーに送信する。
そのため、ユーザーはリクエストのたびにユーザー情報を入力する必要はない。
*** 特徴
- 実装が容易
- セキュリティが低い
  - ユーザー名とパスワードを[[id:F75EAE00-EC02-468B-BE3F-AF8D254335FB][Base64]]エンコードしているため、簡単にデコードできてしまう
** Digest認証
:PROPERTIES:
:ID:       769671A8-68CD-46E7-89BB-2765D58AE623
:END:
- ダイジェスト認証
- [[id:78D2FD39-C567-4EFD-B99A-84E21FC4A5A7][Basic認証]]よりもセキュア
  ユーザー情報を暗号化してサーバーに送信する仕組みになっている
- Basic認証と同様に認証情報はキャッシュされる
*** フロー
1. ユーザーが保護されたリソースにアクセス
2. サーバーがブラウザに401を返す
   #+begin_example
   HTTP 401 Unauthorized
   WWW-Authenticate: Digest realm="Aceess to the site"
                            nonce="<ランダム生成文字列>"
   #+end_example
3. ユーザーがユーザー名とパスワードを入力
4. ブラウザからサーバーに認証情報を送信
   Authorizationヘッダーに以下のパラメータが設定される
   | param    | description                                         |
   |----------+-----------------------------------------------------|
   | username | ユーザーが入力したユーザー名                            |
   | response | ユーザー名とパスワードに[[id:3CE2FB8C-25D6-436E-8155-CDD6FCBC7000][nonce]]を組み合わせて暗号化した文字列 |
   | nonce    | サーバーから受け取ったnonce                             |

5. サーバーが認証情報を検証
6. サーバーが認証結果をブラウザに返す
   - 認証成功: 200
   - 認証失敗: 401

*** 特徴
- 実装が容易
- Basic認証よりもセキュリティが高い
  - しかし、暗号化の強度の問題など脆弱な点もある
  - もっとセキュアな認証方式が存在する

** セッションベース認証
:PROPERTIES:
:ID:       01D10A7A-2B30-4BE1-8AEC-4103DD158C3B
:END:
- Webアプリケーションでよく用いられる認証方法の一つ
- ブラウザからサーバーへのリクエストのたびに[[id:78D2FD39-C567-4EFD-B99A-84E21FC4A5A7][Basic認証]]や[[id:769671A8-68CD-46E7-89BB-2765D58AE623][Digest認証]]とは
  違い、セッションIDというユーザー情報と紐づけられたIDをリクエストに含
  む

*** フロー
1. ユーザーが認証情報をブラウザに入力し、サーバーにリクエスト
2. サーバーは受け取ったユーザー情報とデータベース上に保存してあるユー
   ザー情報一致すれば、サーバーでセッションIDを生成する
3. 認証成功のレスポンスをブラウザに返却
   - この時、生成したセッションIDをSet-Cookieヘッダーに設定する
4. ブラウザが認証成功のレスポンスを受けっとった後、[[id:FC7AC8B2-18E3-40A7-B2B0-C481B79352B4][Cookie]]にセッションIDを保存する
5. 再度リソースにアクセスする時は、Cookieヘッダーにクッキーに保存して
   いるセッションIDが自動的に設定される

*** 特徴
- ステートフル
  - サーバーでセッションとユーザー情報の紐付きを管理する必要がある
- [[id:78D2FD39-C567-4EFD-B99A-84E21FC4A5A7][Basic認証]]/[[id:769671A8-68CD-46E7-89BB-2765D58AE623][Digest認証]]よりセキュア
  - Basic/Digest認証はリクエストのたびに ~ユーザー情報~ を送信している
  - セッションベースではリクエストのたびに ~セッションID~ のみを送信す
    るしかし、セッションIDが漏洩した場合は他のユーザーのリソースにアク
    セスできてしまうため、セッションの有効期限やクッキーのHttpOnly属性、
    Secure属性を使ってセッションIDが漏洩するリスクを低減した方がよい
    
** トークンベース認証
:PROPERTIES:
:ID:       195E78EA-25BC-4452-B675-15FE47D78AE4
:END:
- [[id:01D10A7A-2B30-4BE1-8AEC-4103DD158C3B][セッションベース認証]]と同様にWebアプリケーションでよく用いられる認証方法のひとつ
- ユーザー情報と紐づけられたセッションIDを使って認証するセッションベース認証とは違い、
  アクセス可能なリソースの範囲（スコープ）の情報を含んだトークンを使って認証する

*** フロー
1. ユーザーが認証情報をブラウザに入力し、サーバーにリクエスト
2. サーバーは受け取ったユーザー情報とデータベース上に保存してあるユー
   ザー情報一致すれば、サーバーでトークンを発行する
   - トークンはセッションIDとは異なりユーザー情報を紐づけて管理していない。
   - [[id:E1CF7399-D63C-49A7-BE75-56F2D51704EF][JWT]]形式のトークンを使用することが多い
3. ブラウザがログイン成功のレスポンスを受け取った後、[[id:5A0770D3-61A7-4618-9126-A3B88F1FF7F6][ブラウザのデータストレージ]]にトークンを保存する
4. 再度サーバー上のリソースにアクセスする時、Authorizationヘッダーに[[id:393E677E-CA2A-4329-905B-A42104B38B31][Bearer]] <トークン>の形式でトークンを設定し、リクエストを送信する

*** 特徴
- ステートレス
- トークンを無効化できない

** OAuth
- *認可* のフレームワーク
_ OpenのO

*** OAuthの登場人物
- リソースオーナー
  - 保護されたリソースの所有者のこと
- リソースサーバー
  - 保護されたリソースを提供するサーバーのこと
- クライアント
  - 保護されたリソースにアクセスするアプリケーション
- 認可サーバー
  - 保護されたリソースへのアクセス権限をクライアントに与えるサーバー
  - アクセストークンを発行するサーバー

*** フロー
※ 認可コードグラントのフロー

**** 1. 認可コードの取得
1. OAuth開始
   - リソースオーナーがOAuth開始操作を実施するところからOAuthフローが開始する
     - ユーザーがログインボタンを押下するなど
   - クライアントはOAuth開始のリクエストを受け付けると、HTTP 302を返却し、
     認可サーバーが提供する認可エンドポイントへリダイレクトさせる
     -> *認可リクエスト*
   - リダイレクトによってブラウザから認可エンドポイントに以下のリクエストを送信する
     #+begin_src http
       GET /o/oauth2/v2/auth
	   ?response_type=code
	   &scope=https://www.googleapis.com/auth/drive.readonly
	   &client_id=YOUR_CLIENT_ID
	   &redirect_uri=YOUR_REDIRECT_URL

       HTTP/1.1
       Host: accounts.google.com
     #+end_src
     | params | description |
     |        |             |


*** OAuth Grant Types
:PROPERTIES:
:ID:       C8FACF44-9351-40A6-8595-BC889D408888
:END:

https://logmi.jp/tech/articles/322829

- Grant: 付与
- Grant Type: アクセストークンを取得する方法

| type                                | 認可エンドポイント | トークンエンドポイント |
|-------------------------------------+-----------------+--------------------|
| Auhotization Code                   | use             | use                |
| Implicit                            | use             | not use            |
| Resource Owner Password Credentials | not use         | use                |
| Client Credentials                  | not use         | use                |
| Refresh Token                       | not use         | use                |

**** Auhotization Code (認可コード)
:PROPERTIES:
:ID:       E500FC76-E8D4-4A5B-B2B9-6F1F773BBD65
:END:

**** Implicit (暗黙的)
:PROPERTIES:
:ID:       D84E7459-0BD3-44F0-A05D-382996E4C480
:END:
- 推奨されていない

**** Resource Owner Password Credentials
:PROPERTIES:
:ID:       EA331C5D-DD67-47CA-BB36-5C16306A355B
:END:

**** Client Credentials
:PROPERTIES:
:ID:       5DF5AB75-FC86-46FB-9A72-91F905DD1D04
:END:

**** リフレッシュトークン
:PROPERTIES:
:ID:       5E68A045-7AF7-46A1-B4E9-25C5AA511BCB
:END:
