:PROPERTIES:
:ID:       ED5A76B1-6C02-4AFB-9673-AA1E5E2E6330
:END:
#+title: Document PiP
#+filetags: :web:

* Document PiPとは
- これまでの[[id:53DA0EF6-745A-491B-9A26-C2C59215F52D][PiP]]はVideo要素のみでしか利用できなかった
  - 見た目をカスタマイズするためには[[id:72A2AD09-6F7D-4999-873D-CFAFC4010B92][canvas]]を使う必要があった
- [[id:BC3BDECB-8782-4AB2-B778-3AA881EE1078][GoogleChrome]]の最近のアップデートでVideo以外の要素もPiPできるようになった

* Document Picture-in-Picture API
:PROPERTIES:
:ID:       F97C8B48-2491-4A33-B2FD-24EB12416544
:END:

- [[id:2CF48813-D92A-495A-86C9-C265C1D5EEF6][window.open]]と良く似ている
- 似ているけど、以下の重要な違いがある
  - PiPウィンドウは、他のウィンドウの上に浮いて表示される
  - PiPウィンドウは、開いたウィンドウより長く存在することはない
    - 元のウィンドウが閉じられたらPiPウィンドウも閉じられる
  - PiPウィンドウは、ナビゲーションができない
  - PiPウィンドウの位置は設定できない

** Opening
PiPウィンドウの開く
#+begin_src js
const pipWindow = await documentPictureInPicture.requestWindow({
    width: 500, // optional
    heithg: 500, // optional
});
pipWindow.document.body.innerHTML = 'Hello from PiP';
#+end_src

※ ↑これでPiPのウィンドウを開くことができるのは、使用時のインタラクショ
ン([[id:BB9C0534-B44A-4CF6-9211-E22FCD2ACCEE][User Activation]])のみであることに注意

** Closing

~pagehide~ イベントをリッスンすることで、PiPウィンドウが閉じられるタイミングを検出できる
#+begin_src js
pipWindow.addEventListener("pagehide", (event) => {
  // do something when pip is closed by the browser/user
});
#+end_src

jsで閉じることもできる
#+begin_src js
pipWindow.close();
#+end_src

** Detecting feature
現在のランタイムがこのAPIをサポートしているかどうかを調べるには、このチェックを使うことができる：
#+begin_src js
if ('documentPictureInPicture' in window) {
  // Feature supported
}
#+end_src

* [[id:F581B8C4-23D6-470A-A9EB-D5F1A84B4C34][React]]でDocument-PiPを実装する
:PROPERTIES:
:ID:       2E65EE30-4AC6-4447-839D-BCE10B348A3B
:END:
https://hackernoon.com/how-to-document-picture-in-picture-in-react-with-typescript

- [[id:F97C8B48-2491-4A33-B2FD-24EB12416544][Document Picture-in-Picture API]]で記載しているのは[[id:F6B92F16-C863-4FB6-8915-6ECD56E646FE][DOM]]を手動で操作している
- [[id:F581B8C4-23D6-470A-A9EB-D5F1A84B4C34][React]]でPiPウィンドウを実装することでインタラクティブ性を追加することができる

** Contextを作成する
- 既存の開いているウィンドウを追跡し、ブラウザでPiPをサポートしているかを検出する
- ウィンドウを開くためのコールバックを管理する

#+begin_src ts
type PiPContextType = {
  isSupported: boolean;
  pipWindow: Window | null;
  requestPipWindow: (width: number, height: number) => Promise<void>;
  closePipWindow: () => void;
};

const PiPContext = createContext<PiPContextType | undefined>(undefined);
#+end_src

上記のプロバイダーを実装する

#+begin_src ts
type PiPProviderProps = {
  children: React.ReactNode;
};
#+end_src

#+begin_src ts
export function PiPProvider({ children }: PiPProviderProps) {
  // Detect if the feature is available.
  const isSupported = "documentPictureInPicture" in window;

  // Expose pipWindow that is currently active
  const [pipWindow, setPipWindow] = useState<Window | null>(null);

  // Close pipWidnow programmatically
  const closePipWindow = useCallback(() => {
    if (pipWindow != null) {
      pipWindow.close();
      setPipWindow(null);
    }
  }, [pipWindow]);

  // Open new pipWindow
  const requestPipWindow = useCallback(
    async (width: number, height: number) => {
      // We don't want to allow multiple requests.
      if (pipWindow != null) {
        return;
      }

      const pip = await window.documentPictureInPicture.requestWindow({
        width,
        height,
      });

      // Detect when window is closed by user
      pip.addEventListener("pagehide", () => {
        setPipWindow(null);
      });

      // It is important to copy all parent widnow styles. Otherwise, there would be no CSS available at all
      // https://developer.chrome.com/docs/web-platform/document-picture-in-picture/#copy-style-sheets-to-the-picture-in-picture-window
      [...document.styleSheets].forEach((styleSheet) => {
        try {
          const cssRules = [...styleSheet.cssRules]
            .map((rule) => rule.cssText)
            .join("");
          const style = document.createElement("style");

          style.textContent = cssRules;
          pip.document.head.appendChild(style);
        } catch (e) {
          const link = document.createElement("link");
          if (styleSheet.href == null) {
            return;
          }

          link.rel = "stylesheet";
          link.type = styleSheet.type;
          link.media = styleSheet.media.toString();
          link.href = styleSheet.href;
          pip.document.head.appendChild(link);
        }
      });

      setPipWindow(pip);
    },
    [pipWindow]
  );

  const value = useMemo(() => {
    {
      return {
        isSupported,
        pipWindow,
        requestPipWindow,
        closePipWindow,
      };
    }
  }, [closePipWindow, isSupported, pipWindow, requestPipWindow]);

  return <PiPContext.Provider value={value}>{children}</PiPContext.Provider>;
}
#+end_src

上記のコンテキストを利用しやすいようにカスタムフックを作成
#+begin_src ts
export function usePiPWindow(): PiPContextType {
  const context = useContext(PiPContext);

  if (context === undefined) {
    throw new Error("usePiPWindow must be used within a PiPContext");
  }

  return context;
}
#+end_src

** マウントする
- PiPウィンドウにアクセスできるようになったら、React APIを使ってレンダリングする
- PiPウィンドウはReactが管理するDOMツリーの一部ではない
- [[id:A4DAC402-37AE-43FF-B9E3-22A6BF0FA46E][createPortal]] APIを使用して別のDOM要素としてレンダリングする

新しく作成されたPiPウィンドウ内でレンダリングするコンポーネントを実装する
#+begin_src tsx
import { createPortal } from "react-dom";

type PiPWindowProps = {
  pipWindow: Window;
  children: React.ReactNode;
};

export default function PiPWindow({ pipWindow, children }: PiPWindowProps) {
  return createPortal(children, pipWindow.document.body);
}
#+end_src

これでDocument PiPできる
#+begin_src tsx
function Example() {
  const { isSupported, requestPipWindow, pipWindow, closePipWindow } =
    usePiPWindow();

  const startPiP = useCallback(() => {
    requestPipWindow(500, 500);
  }, [requestPipWindow]);

  const [count, setCount] = useState(0);

  return (
    <div>
      {/* Make sure to have some fallback in case if API is not supported */}
      {isSupported ? (
        <>
          <button onClick={pipWindow ? closePipWindow : startPiP}>
            {pipWindow ? "Close PiP" : "Open PiP"}
          </button>
          {pipWindow && (
            <PiPWindow pipWindow={pipWindow}>
              <div
                style={{
                  flex: 1,
                  textAlign: "center",
                }}
              >
                <h3>Hello in PiP!</h3>
                <button
                  onClick={() => {
                    setCount((count) => count + 1);
                  }}
                >
                  Clicks count is {count}
                </button>
              </div>
            </PiPWindow>
          )}
        </>
      ) : (
        <div className="error">
          Document Picture-in-Picture is not supported in this browser
        </div>
      )}
    </div>
  );
}
#+end_src
