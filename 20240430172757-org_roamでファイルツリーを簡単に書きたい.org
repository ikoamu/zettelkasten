:PROPERTIES:
:ID:       A947533A-4A3F-4E9A-8D48-512D67548CF0
:END:
#+title: org-roamでファイルツリーを簡単に書きたい
#+filetags: :mywork:

- [[id:848FDA07-7706-4D0E-9A31-6C71D0F579A2][org-mode]]でファイルツリーを簡単に書きたい
- [[id:48D91596-EF2D-4AEC-91D8-4731EDB69336][org-babel]]で実行がいい？
- https://marketplace.visualstudio.com/items?itemName=aprilandjan.ascii-tree-generator
- [[id:45C6278B-128A-4266-B328-7C04C677EAD9][elisp]]のテストってどうやってやるんだっけ？
* 1. 文字列をリストに変換したい
#+begin_src elisp
(defun parse-tree-structure (input)
  "Parse the input string into a nested list structure."
  (with-temp-buffer
    (insert input)
    (goto-char (point-min))
    (let ((tree '())
          (stack '())
          (current-level 0))
      (while (not (eobp))
        (let* ((line (buffer-substring-no-properties 
                      (line-beginning-position) 
                      (line-end-position)))
               (level (if (string-match "^\\*+" line)
                          (length (match-string 0 line))
                        0))
               (content (string-trim (replace-regexp-in-string "^\\*+" "" line))))
          (cond
           ((= level (1+ current-level))
            (push (list content) stack)
            (setq current-level level))
           ((< level current-level)
            (let ((subtree (list content)))
              (while (and stack (> current-level level))
                (setq subtree (cons (car stack) subtree)
                      stack (cdr stack)
                      current-level (1- current-level)))
              (setcdr (car stack) (cons subtree (cdr (car stack))))
              (setq current-level level)))
           (t
            (setcdr (car stack) (cons (list content) (cdr (car stack))))))
          (forward-line 1)))
      (while stack
        (setq tree (cons (car stack) tree)
              stack (cdr stack)))
      (car tree))))
#+end_src
#+RESULTS:
: parse-tree-structure

#+begin_src elisp
(setq input-text "* My Repository
** README.md
** imgs
*** img1.png\n*** img2.png\n** src\n*** index.js\n*** utils.js\n** test\n*** utils.test.js")
#+end_src

#+RESULTS:
#+begin_example
,* My Repository
,** README.md
,** imgs
,*** img1.png
,*** img2.png
,** src
,*** index.js
,*** utils.js
,** test
,*** utils.test.js
#+end_example

#+begin_src elisp
(parse-tree-structure input-text)
#+end_src

#+RESULTS:
| My Repository |

* generate-file-tree
#+begin_src elisp
(defun generate-file-tree (data &optional prefix)
  "Generate a file tree structure string from the given DATA.
PREFIX is used for recursion to handle indentation."
  (let* ((name (car data))
         (children (cadr data))
         (result (list name)))
    (when (listp children)
      (let ((child-count (length children)))
        (dotimes (i child-count)
          (let* ((child (nth i children))
                 (is-last (= i (1- child-count)))
                 (child-prefix (if is-last "└─ " "├─ "))
                 (nested-prefix (if is-last "   " "│  ")))
            (if (listp child)
                (let ((child-name (car child))
                      (grandchildren (cadr child)))
                  (setq result (append result 
                                       (list (concat prefix child-prefix child-name))
                                       (cdr (generate-file-tree
                                             (list child-name grandchildren)
                                             (concat prefix nested-prefix))))))
              (setq result (append result (list (concat prefix child-prefix child)))))))))
    result))
#+end_src

#+RESULTS:
: generate-file-tree

#+begin_src elisp
(generate-file-tree data)
#+end_src

#+RESULTS:
| My Repository | ├─ README.md | ├─ imgs | │  ├─ img1.png | │  └─ img2.png | ├─ src | │  ├─ index.js | │  └─ utils.js | └─ test | └─ utils.test.js |

#+begin_src elisp
(print data)
#+end_src

#+RESULTS:
| My Repository | (README.md (imgs (img1.png img2.png)) (src (index.js utils.js)) (test (utils.test.js))) |
