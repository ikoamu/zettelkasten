:PROPERTIES:
:ID:       4484837B-AD43-481C-87C2-BC42E9944BFE
:END:
#+title: 実践Next.js
#+filetags: :nextjs:book:frontend:web:

https://github.com/practical-nextjs-book

* Next.jsの基礎

** Template
~npx create-next-app~
https://nextjs.org/docs/pages/api-reference/create-next-app

** Routeing

*** Tree/SubTree
- Tree: 階層構造を示す規則
- Subtree: 任意のノードをRootとして始め、LeafでおわつTree
- Root: TreeまたはSubtreeにおける最初のノード
- Leaf: 子のない最後のノード

*** Segment/Path
- Segment: ~/~ で区切られたURLの一部
- Path: ドメインの後に続くURL文字列

e.g. example.com/profile/settings
- ~example.com~ : ドメイン
- ~profile~ , ~settings~ : セグメント
- ~/profile/settings~ : パス

- Dynamic Segment: ~/[id]~ 
- Route Segment: 特定のPathに対応するセグメント

*** Route Segmentの最小構成ファイル

**** Page
- page.tsx, page.jsx
- Reactコンポーネントを[[id:E5BDB5F5-A65E-43A2-8F9C-6DAAF9DD0E51][export default]]する

**** RootLayout
- layout.tsx
- 複数の画面間で共有されるUIを実装する場所
- appディレクトリ直下に配置したlayout.tsxはRootLayoutとして識別される
- Page同様Reactコンポーネントを[[id:E5BDB5F5-A65E-43A2-8F9C-6DAAF9DD0E51][export default]]する

** Navigation
- [[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]は[[id:0173C121-7AF7-4502-A344-55787C266B07][SPA]]を提供するフレームワーク
*** ハードナビゲーション
- ブラウザが画面を再読み込みする画面遷移
*** ソフトナビゲーション
:PROPERTIES:
:ID:       88C8DBC2-BE2A-4A37-B963-AD5CAE2600DC
:END:
- ブラウザが画面を再読み込みしない画面遷移
- 画面全体を再描画せずに、必要な箇所だけ再レンダリングする
- 一度取得したデータやレンダリングした画面をキャッシュとして活用できる

AppRouterは変更されたRouteSegmentのみが再レンダリングされる

*** Linkコンポーネント
- ~<a>~ と同じようにhref属性にナビゲーション先のURLを設定する
- ソフトナビゲーションで遷移する

*** Dynamic SegmentとLink
- DynamicSegmentはURLパスパラメータを参照できる

*** useRouterを使用したナビゲーション
- Linkコンポーネントを使用せずにナビゲーションを発火させることができる

** ネスト可能なレイアウト
- 親SegmentLayoutの中に子Segmentがネストされる
  -> 子Segmentが親SegmentLayoutの影響を受ける

* [[id:4066AB86-2395-4A96-AC7D-AB626B960B4E][ServerComponent]]と[[id:529502BE-9536-4339-A7AD-91BA86438899][ClientComponent]]
** 使い分け
*** ServerComponent
- データを取得する
- バックエンドリソースを取得する
- 機密情報を扱う

*** ClinetComponent
- インタラクティブな機能を持つ
- コンポーネントに保持した状態を扱う
- ブラウザ専用のAPI・Hooksを使う
- React Classコンポーネントを使う

** Server Componentのデータ取得
[[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]では標準のデータ取得方法として、[[id:09C3E1C9-55DF-4CCB-972B-A3023FF570AB][window.fetch]]を使う。
[[id:09C3E1C9-55DF-4CCB-972B-A3023FF570AB][window.fetch]]は[[id:4484837B-AD43-481C-87C2-BC42E9944BFE][実践Next.js]]内で拡張されている

*** 直接データを取得する[[id:4066AB86-2395-4A96-AC7D-AB626B960B4E][ServerComponent]]
:PROPERTIES:
:ID:       2E0A0A05-9090-4B64-A501-79B5687F49E4
:END:
ServerComponentではコンポーネントレベルで直接データを取得できる
※[[id:6074FCBD-4CB2-4B0C-9D95-4916E4073EEB][Page Router]]ではページレベルでデータを取得していた

#+begin_src jsx
export default async function ServerComponent() {
  const res = await fetch();
  const data = await res.json();
  return <div>{・・・}</div>;
}
#+end_src

データの取得に伴い、エラーハンドリングやローディングを考慮する必要がある

**** [[id:4066AB86-2395-4A96-AC7D-AB626B960B4E][ServerComponent]]でデータを取得する利点
- バックエンドリソースへ直接アクセスできる
- トークンやAPIキーをクライアントサイドで持たなくて良い
- クライアント・サーバー間の通信往復回数が削減される
- クライアント・サーバー間のウォーターフォールが削減される
  - HTMLやアセットそれぞれの順番にダウンロードしていくこと？
  - DevToolのネットワークタブで確認できる

**** データを並列で取得する
[[id:95D0A141-FBE2-4A24-8B7B-BC5D89DA11D2][Promise.all]]でやる
#+begin_src tsx
export default async function Page({ params, searchParams }: Props) {
  const [category, photos] = await Promise.all([
    getCategory(),
    getPhotos(),
  ]);
  // ・・・
}
#+end_src

** Cache
- [[id:09C3E1C9-55DF-4CCB-972B-A3023FF570AB][window.fetch]]は[[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]で拡張されている
- デフォルトでキャッシュが聴く
- キャッシュを無効化したい場合は[[id:09C3E1C9-55DF-4CCB-972B-A3023FF570AB][window.fetch]]のOptionに ~{cache: "no-store"}~ を設定する
** Routeのレンダリング
- 静的ファイルは[[id:01707DE6-A267-43D6-8396-4C98160BA777][CDN]]で配信できる

[[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]はRouteごとにレンダリング手法を選べる
- 静的レンダリングRoute
- 動的レンダリングRoute

*** 静的レンダリングRoute
- レンダリング結果をHTMLなどの静的ファイルに出力し、レスポンスとして使用する
- [[id:01707DE6-A267-43D6-8396-4C98160BA777][CDN]]で配信できる
- [[id:2D6C4937-D346-4E3C-A9A0-F45B686310A6][ISR]]もこっち
- [[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]はで基本的にこっちでレンダリングしようとして、無理だったら動的にする

*** 動的レンダリングRoute
- リクエスト内容を都度評価する
- 常に最新のデータを返したり、リクエスト内容に応じてレンダリング結果を動的に変えるRoute
- 動的データを取得する場合
  - ~{cache: "no-store"}~ 
- 動的関数を使用する場合
- Dynamic Segmentを使用する場合

* AppRouterの規約

** Segment構成ファイル
| 名称       | 拡張子         | 用途                           |
|-----------+---------------+-------------------------------|
| layout    | .js .jsx .tsx | Segmentとその子の共有UI         |
| page      | .js .jsx .tsx | Segment独自のUI                |
| loading   | .js .jsx .tsx | Segmentとその子の読み込みUI      |
| not-found | .js .jsx .tsx | Segmentとその子の404UI          |
| error     | .js .jsx .tsx | Segmentとその子のエラーUI        |
| route     | .js .ts       | サーバーサイドAPIエンドポイント   |
| template  | .js .jsx .tsx | 際レンダリングされるレイアウトUI   |
| default   | .js .jsx .tsx | Parallel routeのフォールバックUI |

Segment構成ファイルは[[id:561BE9A0-F446-4406-9D6E-85C9C3DF8EE7][React Suspense]]を前提としたコンポーネントツリーを構築する

e.g.
#+begin_example
dashboard
|- layout.tsx
|- template.tsx
|- error.tsx
|- loading.tsx
|- not-found.tsx
-- page.tsx
#+end_example

このPathへのリクエストとして次のようなReactツリーが自動構築され、RouteのUIとして提供される

#+begin_src jsx
<Layout>
  <Template>
    <ErrorBoundary fallback={<Error/>}>
      <Suspense fallback={<Loading />}>
        <ErrorBoundary fallback={<NotFound/>}>
          <Page />
        </ErrorBoundary>
      </Suspense>
    </ErrorBoundary>
  </Template>  
</Layout>
#+end_src

子Segmentと親Segmentの関係
#+begin_example
dashboard
|- layout.tsx
|- error.tsx
|- loading.tsx
-- settings
   |- layout.tsx
   |- error.tsx
   |- loading.tsx
   -- page.tsx
#+end_example

#+begin_src jsx
<Layout>
  <ErrorBoundary fallback={<Error/>}>
    <Suspense fallback={<Loading />}>
      {/* ここからsettings Segment  */}
      <Layout>
        <ErrorBoundary fallback={<Error/>}>
          <Suspense fallback={<Loading />}
            <Page />
          </Suspense>
        </ErrorBoundary>
      </Layout>
      {/* ----- */}
    </Suspense>
  </ErrorBoundary>
</Layout>
#+end_src

** Segment構成フォルダ

*** Dynamic Route Segment
- パスに含まれるパラメータを参照できる
- フォルダ名称を ~[slug]~ のように[]で囲むことでパスパラメータに応じた画面を提供できるようになる

**** 基本
| Route                    | URLのリクエスト例 | params      |
|--------------------------+-----------------+-------------|
| app/blog/[slug]/page.tsx | /blog/a         | {slug: 'a'} |
| app/blog/[slug]/page.tsx | /blog/b         | {slug: 'b'} |
| app/blog/[slug]/page.tsx | /blog/c         | {slug: 'c'} |

**** Catch-all Segment
:PROPERTIES:
:ID:       D46B7F37-40B3-4301-AAF9-01EE69626E4D
:END:
- ~[...slug]~ という命名規則でフォルダを定義する
- ネストされたPathに対応し、配列としてパスパラメータを参照できる

| Route                       | URLのリクエスト例 | params                  |
|-----------------------------+-----------------+-------------------------|
| app/shop/[...slug]/page.tsx | /shop/a         | {slug: ['a']}           |
| app/shop/[...slug]/page.tsx | /shop/a/b       | {slug: ['a', 'b']}      |
| app/shop/[...slug]/page.tsx | /shop/a/b/c     | {slug: ['a', 'b', 'c']} |

**** Optional Catch-all Segment
:PROPERTIES:
:ID:       A7C95EF3-147D-4884-A7D6-1D1608C2182E
:END:
- ~[[...slug]]~ という命名規則でフォルダを定義する
- [[id:D46B7F37-40B3-4301-AAF9-01EE69626E4D][Catch-all Segment]]との違いは１行目の ~/shop~ リクエストにも応じる点

| Route                       | URLのリクエスト例 | params                  |
|-----------------------------+-----------------+-------------------------|
| app/shop/[...slug]/page.tsx | /shop           | {}                      |
| app/shop/[...slug]/page.tsx | /shop/a         | {slug: ['a']}           |
| app/shop/[...slug]/page.tsx | /shop/a/b       | {slug: ['a', 'b']}      |
| app/shop/[...slug]/page.tsx | /shop/a/b/c     | {slug: ['a', 'b', 'c']} |


*** Route Groups
:PROPERTIES:
:ID:       F48AE891-BADD-4C04-9447-7A095A381DED
:END:
- フォルダの階層構造は通常、URL Pathに影響を与える
- フォルダの一部をURL Pathから除外したい時に使える
- フォルダ名を ~(feature)~ のように()で囲むことでRoute Groupsとして識別される

**** e.g.
- アプリケーション用に ~(site)~
  - ~/photo~ : 投稿写真閲覧画面
  - ~/categories~ : カテゴリー一覧画面
- 情報提供用に ~(static)~
  - ~/company-info~ : 企業概要画面
  - ~privacy-policy~ : 利用規約画面

#+begin_example
src
└── app
    ├── (site)
    │   ├── photo
    │   │   └── ...
    │   └── categories
    │       └── ...
    ├── (static)
    │   ├── company-info
    │   │   └── ...
    │   └── privacy-info
    │       └── ...
    ├── layout.tsx
    └── page.tsx
#+end_example

**** Route Groups専用レイアウトをネストすることもできる

#+begin_example
src
└── app
    ├── (site)
    │   ├── layout.tsx
    │   ├── photo
    │   │   └── ...
    │   └── categories
    │       └── ...
    ├── (static)
    │   ├── layout.tsx
    │   ├── company-info
    │   │   └── ...
    │   └── privacy-info
    │       └── ...
    ├── layout.tsx
    └── page.tsx
#+end_example    

*** Private Folderと[[id:1F92098A-F591-46F9-994C-62C7C957C6BE][Co-location]]
- appディレクトリ内にRouteに影響を与えないファイルを配置できる
- フォルダの先頭に ~_~ をつけることで、含まれるすべてのファイルをルーティング対象外にできる


** [[id:7339784D-88CA-4C6A-849A-744057EEBB5F][Parallel Route]]と[[id:E5AD78CC-CE44-4698-91E0-93EDF6A619D4][Intercepting Route]]
:PROPERTIES:
:ID:       EF14DF29-D73D-42B0-9C33-1C398D7D2E21
:END:

*** [[id:7339784D-88CA-4C6A-849A-744057EEBB5F][Parallel Route]]
- Segmentではない
**** e.g.
#+begin_example
├── layout.tsx
├── @users
│   ├── default.tsx
│   └── accounts
│       └── page.tsx
├── accounts
│   └── page.tsx
└── photos
    └── page.tsx
#+end_example

[[id:F581B8C4-23D6-470A-A9EB-D5F1A84B4C34][React]] Componentにおいて、「children」はよく知られた特別なProps。
SlotはLayoutにおいて、childrenと同じようにPropsとして渡される

#+begin_src tsx
export default function Layout(props: {
  children: React.ReactNode;
  users: React.ReactNode;
}) {
  return (
    <>
      {props.children}
      {props.users}
    </>
  );
}
#+end_src
 ~props.users~ は常にレンダリングされるとは限らない。
- ~@users~ をRootとしたSubtreeと、表示しているRoute Segmentが一致したタイミングで表示される

*** [[id:E5AD78CC-CE44-4698-91E0-93EDF6A619D4][Intercepting Route]]
- 名前の通りRouteを横取りする（インターセプトする）ためのRoute定義
- 通常定義されたSegmentをインターセプトし、このフォルダ内に格納された異なるSegment定義を画面として提供する
- Interceptiong Routesを活用すると「[[id:88C8DBC2-BE2A-4A37-B963-AD5CAE2600DC][ソフトナビゲーション]]でモーダル画面を表示する」といったUI実装が可能になる

**** 規則
| 規則      | 横取りするSegment     |
|----------+---------------------|
| (.)      | 同じレベル            |
| (..)     | 1つ上の階層           |
| (..)(..) | 2つ上の階層           |
| (...)    | appディレクトリのroot |

**** e.g.

#+begin_example
├── @modal
│   └── (.)photos
│       └── [photoId]
│           └── page.tsx
├── layout.tsx
└── photos
    └── [photoId]
        └── page.tsx
#+end_example
* サンプルアプリの概要
[[https://github.com/practical-nextjs-book/applications][Photo Share]]

** 使ってる技術
- [[id:FDCE6523-729C-49D9-9041-CC46F0DA0D23][Docker]]
- [[id:A6B8CAAE-4125-4A8B-80FB-67BDEE98C93A][Prisma]]
- [[id:5ED18B48-8BA7-4845-9003-D9B3F602010F][PostgresSQL]]
- [[id:30896637-F9A3-40F3-8EAD-F5B51EB5BECF][minio]]
** ざっくりプロジェクト構成

| プロジェクト    | サーバー種別               | 接続するDBサーバー        | 使用する章 |
|---------------+--------------------------+------------------------+----------|
| sns-api-1     | Web API サーバー           | DBなし                  |        6 |
| sns-api-2     | Web API サーバー           | ps-db-data(投稿者新情報) |      6-9 |
| sns-web-1     | Web アプリケーションサーバー | DBなし                  |        6 |
| sns-web-2     | Web アプリケーションサーバー | ps-db-user(ユーザー情報) |      6-9 |
| sns-web-3     | Web アプリケーションサーバー | ps-db-user(ユーザー情報) |      6-9 |
| sns-shared-ui | UIライブラリ               | DBなし                  |      5-9 |

- サンプルアプリの[[https://github.com/practical-nextjs-book/applications][Photo Share]]のUIコンポーネントは[[https://github.com/practical-nextjs-book/applications/tree/main/packages/sns-shared-ui][sns-shared-ui]]で共通化している
  - [[id:E522835E-62BD-46CC-B9D3-7AF6DCE7BC00][Storybook]]でUIを確認できる
- 上記のプロジェクトからなる[[id:E45215F5-ED0D-40AF-A683-A760FD54DFBE][monorepo]]構成
  - モノレポにおける[[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]は、別のNext.jsプロジェクトのコードを直接importして[[id:AF3CA5B3-0B26-4AA5-A941-E2962B05E887][トランスパイル]]できる

** コンテナ起動

#+begin_src shell
$ cd applications
$ docker compose up -d
#+end_src

* 第6章 データ取得とキャッシュ

** [[id:09C3E1C9-55DF-4CCB-972B-A3023FF570AB][fetch]]関数でのデータ取得
