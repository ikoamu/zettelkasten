:PROPERTIES:
:ID:       4484837B-AD43-481C-87C2-BC42E9944BFE
:END:
#+title: 実践Next.js
#+filetags: :nextjs:book:frontend:web:

https://github.com/practical-nextjs-book

* Next.jsの基礎

** Template
~npx create-next-app~
https://nextjs.org/docs/pages/api-reference/create-next-app

** Routeing

*** Tree/SubTree
- Tree: 階層構造を示す規則
- Subtree: 任意のノードをRootとして始め、LeafでおわつTree
- Root: TreeまたはSubtreeにおける最初のノード
- Leaf: 子のない最後のノード

*** Segment/Path
- Segment: ~/~ で区切られたURLの一部
- Path: ドメインの後に続くURL文字列

e.g. example.com/profile/settings
- ~example.com~ : ドメイン
- ~profile~ , ~settings~ : セグメント
- ~/profile/settings~ : パス

- Dynamic Segment: ~/[id]~ 
- Route Segment: 特定のPathに対応するセグメント

*** Route Segmentの最小構成ファイル

**** Page
- page.tsx, page.jsx
- Reactコンポーネントを[[id:E5BDB5F5-A65E-43A2-8F9C-6DAAF9DD0E51][export default]]する

**** RootLayout
- layout.tsx
- 複数の画面間で共有されるUIを実装する場所
- appディレクトリ直下に配置したlayout.tsxはRootLayoutとして識別される
- Page同様Reactコンポーネントを[[id:E5BDB5F5-A65E-43A2-8F9C-6DAAF9DD0E51][export default]]する

** Navigation
- [[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]は[[id:0173C121-7AF7-4502-A344-55787C266B07][SPA]]を提供するフレームワーク
*** ハードナビゲーション
- ブラウザが画面を再読み込みする画面遷移
*** ソフトナビゲーション
- ブラウザが画面を再読み込みしない画面遷移
- 画面全体を再描画せずに、必要な箇所だけ再レンダリングする
- 一度取得したデータやレンダリングした画面をキャッシュとして活用できる

AppRouterは変更されたRouteSegmentのみが再レンダリングされる

*** Linkコンポーネント
- ~<a>~ と同じようにhref属性にナビゲーション先のURLを設定する
- ソフトナビゲーションで遷移する

*** Dynamic SegmentとLink
- DynamicSegmentはURLパスパラメータを参照できる

*** useRouterを使用したナビゲーション
- Linkコンポーネントを使用せずにナビゲーションを発火させることができる

** ネスト可能なレイアウト
- 親SegmentLayoutの中に子Segmentがネストされる
  -> 子Segmentが親SegmentLayoutの影響を受ける

* [[id:4066AB86-2395-4A96-AC7D-AB626B960B4E][ServerComponent]]と[[id:529502BE-9536-4339-A7AD-91BA86438899][ClientComponent]]

** 使い分け
*** ServerComponent
- データを取得する
- バックエンドリソースを取得する
- 機密情報を扱う

*** ClinetComponent
- インタラクティブな機能を持つ
- コンポーネントに保持した状態を扱う
- ブラウザ専用のAPI・Hooksを使う
- React Classコンポーネントを使う

** Server Componentのデータ取得
[[id:2268258C-DC8F-4459-A48C-0F342BD80E2E][Next.js]]では標準のデータ取得方法として、[[id:09C3E1C9-55DF-4CCB-972B-A3023FF570AB][window.fetch]]を使う。
[[id:09C3E1C9-55DF-4CCB-972B-A3023FF570AB][window.fetch]]は[[id:4484837B-AD43-481C-87C2-BC42E9944BFE][実践Next.js]]内で拡張されている

*** 直接データを取得する[[id:4066AB86-2395-4A96-AC7D-AB626B960B4E][ServerComponent]]
:PROPERTIES:
:ID:       2E0A0A05-9090-4B64-A501-79B5687F49E4
:END:
ServerComponentではコンポーネントレベルで直接データを取得できる
※[[id:6074FCBD-4CB2-4B0C-9D95-4916E4073EEB][Page Router]]ではページレベルでデータを取得していた

#+begin_src jsx
export default async function ServerComponent() {
  const res = await fetch();
  const data = await res.json();
  return <div>{・・・}</div>;
}
#+end_src

データの取得に伴い、エラーハンドリングやローディングを考慮する必要がある

**** [[id:4066AB86-2395-4A96-AC7D-AB626B960B4E][ServerComponent]]でデータを取得する利点
- バックエンドリソースへ直接アクセスできる
- トークンやAPIキーをクライアントサイドで持たなくて良い
- クライアント・サーバー間の通信往復回数が削減される
- クライアント・サーバー間のウォーターフォールが削減される
  - HTMLやアセットそれぞれの順番にダウンロードしていくこと？
  - DevToolのネットワークタブで確認できる

**** データを並列で取得する
[[id:95D0A141-FBE2-4A24-8B7B-BC5D89DA11D2][Promise.all]]でやる
#+begin_src tsx
export default async function Page({ params, searchParams }: Props) {
  const [category, photos] = await Promise.all([
    getCategory(),
    getPhotos(),
  ]);
  // ・・・
}
#+end_src
