:PROPERTIES:
:ID:       4F488C31-E1C5-4CB9-8BA5-D32A9BDE1F00
:END:
#+title: プロンプトエンジニアリング入門
#+filetags: :GenAI:AWS_SUMMIT_2024:AWS:

* [[id:7FFFB0AA-67B7-4052-83A0-2F2D3D22E143][基盤モデル]][[id:25325C32-83C5-4A63-A994-0766C6ECB2D9][LLM]]と[[id:25325C32-83C5-4A63-A994-0766C6ECB2D9][LLM]]

** トランスフォーマーアーキテクチャ
1. エンコーダーは入力を埋め込みに変換する
2. デコーダーは埋め込みを受け取り、出力テキストを生成する

*** 主な機能
- 並列化可能
- トレーニングにかかる時間が短い
* 基盤モデルのトレーニング
1. 事前学習
2. ファインチューニング
   - 時間がかかる
3. [[id:ED58DDF9-C043-4B21-B9C6-5A150C813353][プロンプトエンジニアリング]]
   - 時間かからない

* [[id:ED58DDF9-C043-4B21-B9C6-5A150C813353][プロンプトエンジニアリング]]の主要概念

** プロンプトの要素

*** インストラクション

*** コンテキスト
- 会話の履歴・背景

*** 入力データ
- 実際の入力データ
- ナレッジデータ
*** 出力インジケーター
- 期待するデータの詳細を伝える
** プロンプトを構成するベストプラクティス
- 人間にとっても良いプロンプトがAIにとっても良い

* 基本的なテクニック

** ゼロショットプロンプト
- LLMに例（ショット）なしでタスクを依頼する
- LLMに対する入力をシンプルにする -> 業務コストが下がる可能性がある
** 数ショットプロンプト
- タスクにコンテキスト情報または出力のいくつかのショットを提供する
** 思考の連鎖 CoT: Chain of Tought
- LLMにタスクを提供し、モデルに段階的に考えるように依頼する
- 答えを出すまでの過程を出して応答してくれる
  - どのような計算をしているのかを出すことで精度が上がる
