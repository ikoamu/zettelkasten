:PROPERTIES:
:ID:       C28C4EAE-E86F-4788-B8FE-2A3F60CBE30B
:END:
#+title: org-modeとLiveCoding
#+filetags: :tidalcycles:org-mode:

* setup
- [ ] 画像を表示する
#+begin_src elisp :results silent
  (setq org-image-actual-width nil)
  (org-toggle-inline-images)
#+end_src
- [ ] CODEBLOCKの結果を消しておく
- [ ] 音声が正しく出せるかを確認する
- [ ] 全てのツリーを閉じる
- [ ] SuperDirtをstart
- [ ] tidalをstart
#+begin_src elisp
  (tidal-start-haskell)
#+end_src

  #+RESULTS:
  : #<buffer *tidal*>

* soundcheck
- 発表でPC音声を鳴らしたいのでサウンドチェックします
- 私の声とPCから出ている音楽が聞こえますか？
#+begin_src tidal :results silent
  d1
    $ n "[d3(3,8) f3(3,8) e3(5,8,2) a3(5,8,2)]/2"
    # s "superpiano"
    # room 0.5 # sz 0.6
    # gain 0.6
    # lpf (range 1000 8000 $ slow 2 $ sine)
#+end_src

#+begin_src tidal :results silent
hush
#+end_src

* 自己紹介
#+ATTR_ORG: :width 250
[[file:./img/kitchen_aoki.png]]

- ~※一斉会議での発表は新入社員ぶり(多分)~

- 名前:
  - 青木将太郎
  - ~ikoamu~

- 入社して:
  - ７年目（２０１８年入社）

- 好きなもの
  - org-mode、音楽
    
* 今日発表すること
- 好きなもの
  - org-mode
  - TidalCycles(音楽プログラミング)

（発表資料作ったら全然10分じゃ収まらなかったので超駆け足で話します）

* org-modeとは
- なんでもできるメモ帳くん
- この謎のテキストファイル
- 昔、一斉会議でorg-modeを使って発表する人がいた
- 青木が１年目の時に初めてOJTで参画したプロジェクトで使われてた

** 書き方はMarkdownっぽい
  - *太字*
  - ~インラインコード~
  - /イタリック/
  - クオート
    #+begin_quote
    hogehoge
    #+end_quote

  - コードブロック
    #+begin_src shell
    echo "hello world"
    #+end_src

  - [ ] チェックボックス

  - テーブル
    | id | name   |
    |----+--------|
    |  1 | apple  |
    |  2 | banana |
    |  3 | grape  |
    |  4 | orange |

** 拡張性がすごい
- ~org-mode~ は ~Emacs~ 上で使える
- ~Emacs~ 上では ~Emacs Lisp~ という謎の言語が動くので、コレを使ってさ
  まざまな機能が実現できている
- *つまり、 ~Emacs Lisp~ で自分だけの最強のメモ帳がつくれる！*
 
** 拡張機能(パッケージ)も充実
*** ~org-agenda~
org-modeでタスク・スケジュール管理機能する機能

*** ~org-journal~
org-modeで日記を書く機能

*** ~org-present~
org-modeでプレゼンする機能

*** ~org-chef~
org-modeで料理のレシピを書く機能

*** ~ox-zenn~
org-modeでZennの記事を書く機能

などなど...

** [[id:48D91596-EF2D-4AEC-91D8-4731EDB69336][org-babel]]もすごい
コードブロックをorg-mode上でそのまま実行できる機能

*** shell
#+begin_src shell
echo "hello world"
#+end_src

*** SQL
Next.js勉強会の教材で使っているDBに接続してみる
#+name: categories
#+header: :engine postgres
#+header: :dbhost localhost :dbport 5433 :database app-db
#+header: :dbuser root :dbpassword password
#+begin_src sql
SELECT * FROM "Category";
#+end_src

#+tblname: categories-result
#+RESULTS: categories

*** JavaScript

*結果を別のコードブロックの引数に渡して実行もできる！*

#+header: :var hoge=categories-result
#+begin_src js :results output
console.log(hoge)
#+end_src

* ということで
~org-babel~ と ~TidalCycles~ を使って ~org-mode~ で音楽を作れるようにしてみたので
ライブコーディングします！

#+begin_src tidal :results silent
  d1 $ sound "bd"
#+end_src

* [[id:6EE32A1E-78EA-4524-9E44-CF7E89B75FF5][TidalCycles]]とは
音楽の即興演奏や作曲用に設計されたライブコーディング環境

** 専門的な説明（ややこしい）

[[file:./img/tidalcycle_system.png]]

~SuperCollider~ という音響生成エンジン(プログラミング環境)上にインストールされた
~SuperDirt~ というサンプル音源やシンセサイザーを演奏するためのフレームワークを
~Emacs~ や ~VSCode~ などのテキストエディタから操作することができる
~Haskell~ のライブラリ(????????)

** TidalCyclesの「サイクル」
#+begin_src tidal :results silent
  d1 $ sound "bd" -- bd=バスドラム
#+end_src
指定した音は周期的に（繰り返し）鳴る

#+ATTR_ORG: :width 700
[[file:./img/bd.svg]]

** 1サイクルを分割する
#+begin_src tidal :results silent
  d1 $ sound "bd sd"
#+end_src
#+ATTR_ORG: :width 700
[[file:./img/bd_sd.svg]]

~*~ を使って連続で音を鳴らすこともできる
~()~ を使って音を均等に配置することもできる

** 別トラックで違う音をならす
#+begin_src tidal :results silent
  d2 $ sound "bass*4"
#+end_src

** ~hush~ がサイクルを一時停止する命令
#+begin_src tidal :results silent
  hush
#+end_src

** 複雑なリズムパターンを作る
*** stack関数を使って複数の音をひとつのトラックで鳴らす
#+begin_src tidal :results silent
  -- stackで１つのトラックに複数のサイクルを作成できる
  d1 $ stack [
     -- バスドラム
     sound "bd*4" -- 四つ打ち
     -- スネアドラム
     -- , sound "sn:3*2 ~" -- ~は休符
     -- ハイハット
     -- , sound "~ hc ~ hc ~ hc ~ hc" # speed 0.8 -- speed は音声サンプルの再生速度を変更できる
   ]
    -- stackにまとめてエフェクトをかける
    # gain 0.6  -- gain は音の大きさ
    # shape 0.8 -- 音圧を出すエフェクト（コンプレッサー）
#+end_src

#+begin_src tidal :results silent
  hush
#+end_src

*** ランダムに音を変える
- TidalCyclesの醍醐味
- ランダム関数を使って音を変化させる

#+begin_src tidal :results silent
  d2
    $ sound "bass1:2*8"
    # up 0 -- 音程（ピッチ）を変更するエフェクト
    -- # up (choose [0, 2, 3]) -- choose関数で音程の高さをランダムにする  
    -- # hpf (choose [100, 200, 300, 800]) -- 低音をカット(ハイパスフィルタ)
    # legato 1.0 -- 音の長さを変更するエフェクト
    # gain 0.8
#+end_src

#+begin_src tidal :results silent
  hush
#+end_src

** シンセサイザーも鳴らせる
#+begin_src tidal :results silent
  d3
    -- １サイクルの長さを通常の４倍に伸ばす
    $ slow 4
    --   E♭         F         Gm
    $ n "ef'maj _ _ f'maj _ _ g'min _"
    -- シンセサイザー名
    # sound "superhoover"
    -- 高音をカット(ローパスフィルタ)
    # lpf 1500
    -- 低音をカット(ハイパスフィルタ)
    # hpf 500
    -- 音に残響音・反射音を加える(リバーブ)
    # room 0.5
    # size 0.25
    -- 音量調節(音量を60%に絞る)
    # gain 0.6
#+end_src

#+begin_src tidal :results silent
hush
#+end_src

TidalCyclesおもしろいです。
YouTubeとかで調べるとTidalCyclesを使ったかっこいい曲がたくさんあるので
気になった方は調べてみてください。

* おわりに
- LTSさんとのLT大会が楽しかったので、
  もっと自分の好きなことの話をしようと思って久々に発表しました。

  TidalCyalesを学ぶために買った本に凄くいいことが書いてあった
   #+ATTR_ORG: :width 250
   [[file:./img/show_your_screen.png]]
   #+begin_quote
   /コーディングするという行為自体を楽しみましょう。/

   /個人の楽しみとして、楽器を弾くように、詩を書いたり編み物をするように、
   コーディングするという活動自体を楽しむのです。/

   /ライブコーディングを通して、初めて自分で書いたプログラムが動いた時
   の感動を思い出しましょう。/

   /コーディングは仕事のためにいやいや書くものではなく、未知の世界へと
   足を踏み入れるエキサイティングな行為だったはずです。/

   /そして、その喜びを周囲の人たちにも伝えましょう。/
   #+end_quote















- 一斉会議でみなさんも自分の好きなことの話を話しませんか？
  - たまにはこういう発表もあったら嬉しいなと思ってます
  -（多分仕事とあんまり関係なくていいと思います（多分））






































ご清聴ありがとうございました！
